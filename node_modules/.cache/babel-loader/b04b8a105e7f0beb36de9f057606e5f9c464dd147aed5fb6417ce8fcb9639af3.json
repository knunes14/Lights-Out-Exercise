{"ast":null,"code":"var _jsxFileName = \"/Users/keegannunes/Documents/react-lights-out/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\nimport { render } from \"@testing-library/react\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  nrows,\n  ncols,\n  chanceLightStartsOn\n}) {\n  _s();\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    for (let y = 0; y < nrows; y++) {\n      let row = [];\n      for (let x = 0; x < ncols; x++) {\n        row.push(Math.random() < chanceLightStartsOn);\n      }\n      initialBoard.push(row);\n    }\n    return initialBoard;\n  }\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    for (let row of board) {\n      for (let cell of row) {\n        if (cell) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const flipCell = (y, x, boardCopy) => {\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n      const newBoard = [...oldBoard];\n      flipCell(y, x, newBoard);\n      flipCell(y, x - 1, newBoard);\n      flipCell(y, x + 1, newBoard);\n      flipCell(y - 1, x, newBoard);\n      flipCell(y + 1, x, newBoard);\n      return newBoard;\n    });\n  }\n  function renderBoard() {\n    return /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"Board\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: board.map((row, y) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((cell, x) => /*#__PURE__*/_jsxDEV(Cell, {\n            isLit: cell,\n            flipCellsAroundMe: () => flipCellsAround(`${y}-${x}`)\n          }, `${y}-${x}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 17\n          }, this))\n        }, y, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this);\n  }\n  return renderBoard();\n}\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","render","jsxDEV","_jsxDEV","Board","nrows","ncols","chanceLightStartsOn","_s","board","setBoard","createBoard","initialBoard","y","row","x","push","Math","random","hasWon","cell","flipCellsAround","coord","oldBoard","split","map","Number","flipCell","boardCopy","newBoard","renderBoard","className","children","isLit","flipCellsAroundMe","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/keegannunes/Documents/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\nimport { render } from \"@testing-library/react\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    for (let y=0; y<nrows; y++) {\n      let row = [];\n      for (let x=0; x<ncols; x++) {\n        row.push(Math.random() < chanceLightStartsOn);\n      }\n      initialBoard.push(row);\n    }\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    for (let row of board) {\n      for (let cell of row) {\n        if (cell) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      const newBoard = [...oldBoard];\n      flipCell(y, x, newBoard)\n      flipCell(y, x - 1, newBoard)\n      flipCell(y, x + 1, newBoard)\n      flipCell(y - 1, x, newBoard)\n      flipCell(y + 1, x, newBoard)\n\n      return newBoard;\n    });\n  }\n\n  function renderBoard() {\n    return (\n      <table className=\"Board\">\n        <tbody>\n          {board.map((row, y) => (\n            <tr key={y}>\n              {row.map((cell, x) => (\n                <Cell\n                  key={`${y}-${x}`}\n                  isLit={cell}\n                  flipCellsAroundMe={() => flipCellsAround(`${y}-${x}`)}\n                />\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n\n  return renderBoard();\n}\n\nexport default Board;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}